service: toilet-cubicle-system

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1
  stage: ${opt:stage}
  memorySize: 2048
  timeout: 15
  environment:
    APIG_ENDPOINT:
      Fn::Join:
        - ''
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${opt:stage}
    CONNECTIONS_TABLE:
      Ref: ConnectionsTable

  stackTags:
    ProjectName: ALNG
    Environment: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 's3:*'
          Resource:
            - 'arn:aws:s3:::a-low-l-training-data/*'
            - 'arn:aws:s3:::a-low-l-training-data'
            - 'arn:aws:s3:::a-low-l-snapshots/*'
            - 'arn:aws:s3:::a-low-l-snapshots'
        - Effect: Allow
          Action: 'rekognition:*'
          Resource:
            - '*'
        - Effect: Allow
          Action: 'kafka-cluster:*'
          Resource:
            - '*'
        - Effect: Allow
          Action: 'lambda:InvokeFunction'
          Resource:
            - 'arn:aws:lambda:ap-southeast-1:367739249270:function:toilet-cubicle-system-dev-kafkaPublish'
        - Effect: Allow
          Action:
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:PutItem
          Resource:
            Fn::GetAtt:
              - ConnectionsTable
              - Arn

            

plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-resource-tagging

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 3

functions:
  api:
    handler: app.api
    events:
      - http:
          path: sample/{proxy+}
          method: ANY

  train:
    handler: app.train
  
  detect:
    handler: app.detect
    maximumRetryAttempts: 0
    events:
      - s3:
          bucket: a-low-l-snapshots
          event: s3:ObjectCreated:*
          rules:
            - prefix: cam01/
          existing: true
          forceDeploy: true
  
  kafkaPublish:
    handler: app.kafkaPublish
    vpc:
      securityGroupIds:
        - sg-7623bc3c
      subnetIds:
        - subnet-64f1963d
        - subnet-92f952f4
        - subnet-d3469e9b
  
  websocket:
    handler: websocket.handler
    events:
      - websocket:
          # Handles new connection requests
          route: $connect
          # Only the '$connect' route supports an authorizer. The other routes
          # are secured via the connection ID and therefore it should be handled
          # like a session ID.

      - websocket:
          # Handles all unrouted messages
          route: $default

      - websocket:
          # Handles disconnect messages
          route: $disconnect
resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        SSESpecification:
          SSEEnabled: true
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

package:
  individually: true